<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Route;

class Category extends Model
{
    protected $table = 'categories';

    protected $primaryKey = 'cat_id';

    protected $guarded = [];

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function posts(){
        return $this->belongsToMany('App\Post','category_post', 'cat_id', 'post_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function children()
    {
        return $this->hasMany('App\Category', 'parent_id', 'cat_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function parent()
    {
        return $this->belongsTo('App\Category', 'parent_id');
    }

    /**
     * Список всех родителей
     */
    static function parents_list($cat_id){
        $current_cat = Category::findOrFail($cat_id);
        if(!$current_cat) return array();

        if($current_cat->parent_id != 0)
            return array_merge(array($current_cat->parent_id), self::parents_list($current_cat->parent_id));

        return array();
    }

    /** Префикс показатель иерархии
     * @return string
     */
    public function _prefix(){
        $template = '';
        for ($i = 0; $i < count(self::parents_list($this->cat_id)); $i++){
            $template .= '— ';
        }
        return $template;
    }

    /**
     * Получаем масив иерархию категории
     * @param $cat_id
     * @return array
     */
    static function get_categories_children($cat_id, $status = array()){
        $tree = array();
        $where = array(
            array('parent_id', '=', $cat_id)
        );
        if(is_array($status) && count($status)){
            foreach($status as $item){
                $where[] = array('cat_status',$item['rule'],$item['value']);
            }

        }
        $category = Category::where($where)
                            ->orderBy('cat_title', 'desc')
                            ->get();
        if(count($category) > 0) {
            foreach ($category as $cat) {
                $tree[] = $cat;
                $tree = array_merge($tree, self::get_categories_children($cat->cat_id, $status));
            }
        }
        return $tree;
    }

    /**
     * Выводим миниатюру
     * @return string
     */
    public function thumbnail(){
        return Media::getImg($this->cat_thumbnail,'thumbnail');
    }

    /**
     * Выводим полноразмерное фото
     * @return string
     */
    public function img(){
        return Media::getImg($this->cat_thumbnail,'full');
    }

    /**
     * Добавляем фото к категории
     * @param $id
     * @param $value
     */
    static function addPhoto($id, $value){
        $cat = Category::findOrFail($id);
        $cat->cat_thumbnail = $value;
        $cat->save();
    }

    public function delete()
    {
        /**
         * Проверяем если у категории есть дочерние елементы,
         * тогда передаём дочерним елементам его parent_id, а саму категорию благополучно удаляем
         */
        foreach ($this->children()->get() as $child){
            $child->parent_id = $this->parent_id;
            $child->save();
        }
        return parent::delete(); // TODO: Change the autogenerated stub
    }
    /**
     * Метод помещает категорию в корзину
     */
    public function toTrash(){
        $this->cat_status = "trash";
        $this->save();
    }

    /**
     * Метод востанавливает елемент с корзины и помещает категорию в черновики
     */
    public function restore(){
        $this->cat_status = "draft";
        $this->save();
    }

    /**
     * Устанавливаем ХЕШ категории
     * @param $hash
     */
    public function setHash($hash){
        $this->hash_url = sha1($hash);
    }

    static function getNotEmpty(){

        $categories = Category::where(array(
            array('cat_status','<>','draft'),
            array('cat_status','<>','trash'),
        ))
            ->orderBy('created_at','desc')
            ->get();
        $result = $categories;
        foreach ($categories as $key => $cat){
            if(!$cat->posts()->count()){
                unset($result[$key]);
            }
        }

        return $result;
    }

    static function adminRoutes(){
        /**
         * Маршруты отвечают за управление категориями
         */
        Route::get('/adminpanel/newcat',
            ['as'=>'new_cat_view', 'uses'=>'Admin\AdminCategoryController@new_cat']);
        Route::get('/adminpanel/allcat',
            ['as'=>'all_cat_view', 'uses'=>'Admin\AdminCategoryController@all_cat']);
        Route::get('/adminpanel/trashcat',
            ['as'=>'trash_cat_view', 'uses'=>'Admin\AdminCategoryController@all_trash_cat']);
        Route::get('/adminpanel/cat/{cat_id}',
            ['as'=>'edit_cat_view', 'uses'=>'Admin\AdminCategoryController@get_cat']);
        Route::put('/adminpanel/editcat',
            ['as'=>'edit_cat_action', 'uses'=>'Admin\AdminCategoryController@edit_cat']);
        Route::post('/adminpanel/addnewcat',
            ['as'=>'create_cat_action', 'uses'=>'Admin\AdminCategoryController@add_new_cat']);
        /*
         * Удаляем навсегда
         */
        Route::delete('/adminpanel/delcat/{cat_id}',
            ['as' => 'delete_cat', 'uses' => 'Admin\AdminCategoryController@del_cat']);
        Route::delete('/adminpanel/delchosecat',
            ['as' => 'delete_chose_cat', 'uses' => 'Admin\AdminCategoryController@del_chose_cat']);
        /*
         * Помещаем в корзину
         */
        Route::delete('/adminpanel/cattotrash/{cat_id}',
            ['as' => 'to_trash_cat', 'uses' => 'Admin\AdminCategoryController@moveToTrash']);
        Route::delete('/adminpanel/chosecattotrash',
            ['as' => 'to_trash_chose_cat', 'uses' => 'Admin\AdminCategoryController@moveToTrashChosen']);
        /*
         * Восстанавливаем категорию из корзины
         */
        Route::post('/adminpanel/restorecat/{cat_id}',
            ['as' => 'restore_cat', 'uses' => 'Admin\AdminCategoryController@restoreCategory']);
    }
}
